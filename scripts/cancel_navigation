#!/usr/bin/env python3
# -*- coding:utf-8 -*-

#import rospy
import rclpy
from rclpy.node import Node

#from actionlib_msgs.msg import GoalID
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry

from std_msgs.msg import Empty

#import readchar

class CancelNavigationClass(Node):
#class CancelNavigation:
    def __init__(self):

        super().__init__("cancel_navigation")

        self.declare_parameter('pub_goal_topic_name', 'goal_pose')
        self.declare_parameter('sub_odom_topic_name', 'odometry/filtered')

        self.goal_pub = self.create_publisher(PoseStamped, self.get_parameter('pub_goal_topic_name').get_parameter_value().string_value, 1)
        self.create_subscription(Odometry, self.get_parameter('sub_odom_topic_name').get_parameter_value().string_value, self.callback_odom, 10)

        self.create_subscription(Empty, 'cancel_trigger', self.cancel_navigation, 1)

        self.get_logger().info('Start: cancel_navigation')
        #self.get_logger().info('Input Any Key to Stop Navigation')

    def callback_odom(self, data):
        #print('got odom')
        self.odom = data

    def cancel_navigation(self, data):
        #print('cancel')
        self.get_logger().info('Cancel')
        msg = PoseStamped()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = 'map'
        msg.pose.position = self.odom.pose.pose.position
        msg.pose.orientation = self.odom.pose.pose.orientation
        self.goal_pub.publish(msg)
        
'''
class ReadCharClass(Node):
    def __init__(self):

        super().__init__('readkey')

        self.cancel_pub = self.create_publisher(Empty, 'cancel_trigger', 1)

        self.get_logger().info('Start: Trigger')

    def cancel_trigger(self):
        print('Trigger')
        self.cancel_pub.publish(Empty())
'''

if __name__ == '__main__':
    #rospy.init_node('cancel_navifgation')
    rclpy.init()
    node = CancelNavigationClass()

    '''
    #trigger = ReadCharClass()
    trigger = rclpy.create_node('cancel_trigger_node')
    cancel_pub = trigger.create_publisher(Empty, 'cancel_trigger', 1)
    trigger.get_logger().info('Start: Trigger')
    '''

    #rclpy.spin_once(node)
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        node.destroy_node()
        rclpy.shutdown()

    ##ここから
    '''
    while True:
        kb = readchar.readkey()
        print('Input: ' + str(kb) + ' (' + str(ord(kb)) + ')')
        if ord(kb) == 3: # Ctrl + C
            node.get_logger().info("Finish: cancel_navigation")
            break
        else:
            #node.cancel_navigation()
            #trigger.cancel_trigger()
            cancel_pub.publish(Empty())
            print('GOOO')
        
        #rclpy.spin_once(trigger)
        rclpy.spin_once(node)

    node.destroy_node()
    trigger.destroy_node()
    rclpy.shutdown()
    '''
    ##### ROS1 #####
    '''
    rospy.loginfo('Start: Cancel Navigation')

    pub_cancel = rospy.Publisher('move_base/cancel', GoalID, queue_size=1)

    try:
        while not rospy.is_shutdown():
            kb = readchar.readkey()
            print('Input: ' + str(kb) + ' ('  + str(ord(kb)) + ')')

            if ord(kb) == 3: # Ctrl + C
                #print(kb)
                rospy.loginfo('Finish: Cancel Navigation')
                break
            else:
                msg = GoalID()
                msg.stamp = rospy.Time.now()
                msg.id = ''
                pub_cancel.publish(msg)

                rospy.loginfo('Cancel !!')

            #rospy.spin()

    except rospy.ROSInterruptException:
        rospy.loginfo('Finish: Cancel Navigation')
    '''
