#!/usr/bin/env python
# -*- coding:utf-8 -*-
import rospy
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix
from visualization_msgs.msg import Marker

import math 
import pyproj

class LatLng2Pos:
  def __init__(self):
    self.wgs84 = pyproj.Proj(init='EPSG:4326')
    self.rect6 = pyproj.Proj(init='EPSG:2444')
    self.map_frame = rospy.get_param('~map_frame_name', 'map')
    self.odom_frame = rospy.get_param('~odom_frame_name', 'odom')
    self.marker_flag = rospy.get_param('~visualization_marker', False)
    self.fix_value = rospy.get_param('~fix_value', 1)
    self.float_value = rospy.get_param('~float_value ', 0)
    # self.base_frame = rospy.get_param('~base_frame_name', 'base_footprint')

    self.origin_lat = rospy.get_param('~origin_lat', 0.)
    self.origin_lng = rospy.get_param('~origin_lng', 0.)
    self.angle_offset = rospy.get_param('~angle_offset', 0.) * math.pi / 180.0
    self.scale_offset = rospy.get_param('~scale_offset', 1.)
    # self.earth_rad = rospy.get_param('~earth_rad', 6378.137)
    self.solutions_flag = rospy.get_param('~solutions_flag', "all")

    # self.fix_pub   = rospy.Publisher("ublox_gps/navrelposned/fix",   NavRELPOSNED, queue_size=10)
    # self.float_pub = rospy.Publisher("ublox_gps/navrelposned/float", NavRELPOSNED, queue_size=10)
    self.odom_pub = rospy.Publisher(rospy.get_param('~odom_topic_name', 'odom'), Odometry, queue_size=10)
    if self.marker_flag == True:
      self.marker_pub = rospy.Publisher(rospy.get_param('~marker_topic_name', 'gnss_position_marker'), Marker, queue_size=10)
    rospy.Subscriber(rospy.get_param('~nav_sat_fix_topic_name', 'fix'), NavSatFix, self.callback_latlng2pos, queue_size=10)
  
  def _latlng2xy(self, lat, lng):
    x_origin, y_origin = pyproj.transform(self.wgs84, self.rect6, self.origin_lng, self.origin_lat)
    x_ref, y_ref = pyproj.transform(self.wgs84, self.rect6, lng, lat)
    tx = math.cos(self.angle_offset) * (x_ref - x_origin) - math.sin(self.angle_offset) * (y_ref - y_origin)
    ty = math.sin(self.angle_offset) * (x_ref - x_origin) + math.cos(self.angle_offset) * (y_ref - y_origin)
    x = tx * self.scale_offset
    y = ty * self.scale_offset
    return x, y

  def callback_latlng2pos(self, data):

    x, y = self._latlng2xy(data.latitude, data.longitude)

    ##############################################################
    # Marker Setting
    if self.marker_flag == True:
      marker_msg = Marker()
      marker_msg.header.frame_id = "map"
      marker_msg.header.stamp = data.header.stamp

      marker_msg.ns = "GNSS_Pos"
      marker_msg.id = data.header.seq

      marker_msg.action = Marker.ADD

      marker_msg.pose.position.x = x
      marker_msg.pose.position.y = y
      marker_msg.pose.position.z = 0.0

      marker_msg.pose.orientation.x = 0.0
      marker_msg.pose.orientation.y = 0.0
      marker_msg.pose.orientation.z = 0.0
      marker_msg.pose.orientation.w = 0.0
    
      if data.status.status == self.fix_value: 
        marker_msg.color.r = 0.0
        marker_msg.color.g = 0.0
        marker_msg.color.b = 1.0
      elif data.status.status == self.float_value:
        marker_msg.color.r = 0.0
        marker_msg.color.g = 1.0
        marker_msg.color.b = 0.0
      else:
        marker_msg.color.r = 1.0
        marker_msg.color.g = 0.0
        marker_msg.color.b = 0.0

      marker_msg.color.a = 1.0

      marker_msg.scale.x = 0.2
      marker_msg.scale.y = 0.2
      marker_msg.scale.z = 1.0

      marker_msg.lifetime = rospy.Duration()

      marker_msg.type =  Marker.CYLINDER

      self.marker_pub.publish(marker_msg)
    ##############################################################

    odom                         = Odometry()
    odom.header.stamp            = data.header.stamp
    #odom.header.stamp            = rospy.Time.now()
    odom.header.frame_id         = self.map_frame
    odom.child_frame_id          = self.odom_frame
    
    odom.pose.pose.position.x    = x
    odom.pose.pose.position.y    = y
    
    odom.pose.pose.orientation.x = 0.0
    odom.pose.pose.orientation.y = 0.0
    odom.pose.pose.orientation.z = 0.0
    odom.pose.pose.orientation.w = 1.0
    
    print("LatLngPos")
    if self.solutions_flag == "all":
      self.odom_pub.publish(odom)
      print("|----[All] : All solutions are being published")
    elif self.solutions_flag == "fix":
      if data.status.status == self.fix_value:
        self.odom_pub.publish(odom)
        print("|----[Fix] : Fix solutions are being published")
      else:
        print("|----Selected flag is [fix], however solutions are not fix")
    elif self.solutions_flag == "float":
      if data.status.status == self.fix_value or data.status.status == self.float_value:
        self.odom_pub.publish(odom)
        print("|----[Float] : Fix and Float solutions are being published")
      else:
        print("|----Selected flag is [float], however solutions are not foat")
    else:
      print("|----Invalid Solutions Flag")


if __name__ == '__main__':
  rospy.init_node('LatLng2Pos', anonymous=True)
  try:
    LatLng2Pos()
    rospy.spin()
  except rospy.ROSInterruptException:
    rospy.loginfo("LatLng2Pos node finished.")
