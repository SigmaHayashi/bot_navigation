#!/usr/bin/env python
# -*- coding:utf-8 -*-

import rospy

from move_base_msgs.msg import MoveBaseAction, MoveBaseActionGoal, MoveBaseGoal
import actionlib
from geometry_msgs.msg import Vector3, Quaternion
import tf
import math
from nav_msgs.msg import Odometry

from actionlib_msgs.msg import GoalID, GoalStatusArray

#from lawnmower.msg import nav_manager_command, nav_manager_status
from bot_navigation.msg import nav_manager_command, nav_manager_status


class NavigationManager():
    def __init__(self):
        rospy.loginfo("Init NavigationManager")

        self.goal_count = 0
        self.goal_list = []

        self.recent_goal_id = ''
        
        self.status = 0
        self.status_backup = 0
        # 0 : stop
        # 1 : pause
        # 2 : moving
        # 3 : moving (rviz)
        # 4 : recovery

        self.nav_start_time = rospy.Time.now()
        self.nav_start_odom = Odometry()
        self.now_odom = Odometry()
        self.recovery_flag = False
        
        self.recovery_start_time = rospy.get_param('~recovery_start_time', 10.0)
        self.recovery_start_pos_thres = rospy.get_param('~recovery_start_pos_thres', 0.5)
        self.recovery_start_rot_thres = math.radians(rospy.get_param('~recovery_start_rot_thres', 10.0))

        self.action_client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        while not self.action_client.wait_for_server(rospy.Duration.from_sec(3.0)):
            rospy.loginfo('Waiting for Action Server...')
        rospy.loginfo('Connected to Action Server')

        self.pub_status = rospy.Publisher('nav_manager/status', nav_manager_status, queue_size=1)

        rospy.Subscriber('nav_manager/command', nav_manager_command, self.callback_command, queue_size=1)

        rospy.Subscriber('move_base/status', GoalStatusArray, self.callback_move_base_status, queue_size=1)
        
        rospy.Subscriber('move_base/goal', MoveBaseActionGoal, self.callback_move_base_goal, queue_size=1)
        self.rviz_goal = Vector3()

        rospy.Subscriber('odometry/filtered', Odometry, self.callback_odometry_filtered, queue_size=10)


    def callback_command(self, data):
        rospy.loginfo('Received: /nav_manager/command')

        if data.command == 'start':
            rospy.loginfo('command: start')
            self.goal_list = []
            i = 0
            for pos in data.position_list:
                self.goal_list.append(Vector3(pos.x, pos.y, 0.0))
                rospy.loginfo('Received Goal [{}]: (x={:.2f}, y={:.2f})'.format(i, pos.x, pos.y))
                i = i + 1

            self.goal_count = 0
            self.send_goal(self.goal_count)
            self.action_client.wait_for_result(rospy.Duration.from_sec(0.5))

            self.status = 2

        elif data.command == 'stop':
            rospy.loginfo('command: stop')

            self.action_client.cancel_all_goals()

            self.goal_list = []
            self.goal_count = 0
            self.status = 0

        elif data.command == 'pause':
            rospy.loginfo('command: pause')

            if self.status == 2 or self.status == 3: # 動いているときだけ
                self.action_client.cancel_all_goals()

                self.status_backup = self.status
                self.status = 1
            else:
                rospy.logwarn('Not Moving...')

        elif data.command == 'resume':
            rospy.loginfo('command: resume')

            if self.status == 1: # ポーズ中だけ
                self.send_goal(self.goal_count)
                self.status = self.status_backup
            else:
                rospy.logwarn('Not Pausing')

        else:
            rospy.logwarn('command not defined: ' + data.command)


    def send_goal(self, count):
        goal = MoveBaseGoal()
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.header.frame_id = 'map'

        goal.target_pose.pose.position = self.goal_list[count]

        if count == len(self.goal_list) - 1:
            yaw = 0.0
        else:
            yaw = math.atan2(self.goal_list[count+1].y - self.goal_list[count].y, self.goal_list[count+1].x - self.goal_list[count].x)
        qua = tf.transformations.quaternion_from_euler(0.0, 0.0, yaw)
        goal.target_pose.pose.orientation = Quaternion(x=qua[0], y=qua[1], z=qua[2], w=qua[3])

        self.action_client.send_goal(goal)

        rospy.loginfo('Send Goal [{}]: (x={:.2f}, y={:.2f}, yaw={:.2f})'.format(count, self.goal_list[count].x, self.goal_list[count].y, yaw))

        #self.nav_start_time = rospy.Time.now()
        #self.nav_start_odom = self.now_odom


    def callback_move_base_status(self, data):
        #rospy.loginfo('Received: /move_base/status')
        if len(data.status_list) > 0:

            stamp_max_status = data.status_list[0]
            for status in data.status_list:
                if status.goal_id.stamp - stamp_max_status.goal_id.stamp > rospy.Duration(0.0):
                    stamp_max_status = status

            if self.status == 0: # stop中にrvizからゴールを受け取った場合
                if stamp_max_status.goal_id.id.split('-')[0] != rospy.get_name() and stamp_max_status.status != 3:

                    self.recent_goal_id = stamp_max_status.goal_id.id

                    self.goal_list = []
                    self.goal_count = 0
                    self.status = 3
                    
                    #self.nav_start_time = rospy.Time.now()
                    #self.nav_start_odom = self.now_odom

            elif self.status == 2: # moving
                '''
                for status in data.status_list:
                    if status.goal_id.id == self.recent_goal_id and status.status == 3:
                        rospy.loginfo('Reached Goal')
                        
                        if self.goal_count == len(self.goal_list) - 1:
                            self.goal_count = 0
                            self.status = 0
                            rospy.loginfo('Finish')
                        else:
                            self.goal_count = self.goal_count + 1
                            self.send_goal(self.goal_count)
                            
                        break
                '''
                if stamp_max_status.goal_id.id == self.recent_goal_id:
                    if stamp_max_status.status == 3: # ゴールに到達
                        rospy.loginfo('Reached Goal')

                        self.recent_goal_id = ''

                        if self.goal_count == len(self.goal_list) - 1: # 最後のゴールに到達したとき
                            self.goal_count = 0
                            self.status = 0
                            rospy.loginfo('Finish')
                        else: # 次のゴールを設定
                            self.goal_count = self.goal_count + 1
                            self.send_goal(self.goal_count)
                else:
                    self.recent_goal_id = stamp_max_status.goal_id.id

                    if stamp_max_status.goal_id.id.split('-')[0] != rospy.get_name(): # navigation_manager以外が設定したゴールの場合
                        rospy.loginfo('Canceled Goal List')

                        #q = data.goal.target_pose.pose.orientation
                        #goal = Vector3(
                        #    data.goal.target_pose.pose.position.x,
                        #    data.goal.target_pose.pose.position.y,
                        #    tf.transformations.euler_from_quaternion((q.x, q.y, q.z, q.w))[2])
                        self.goal_list = []
                        #self.goal_list.append(goal)
                        self.goal_count = 0
                        self.status = 3
                        
                        #self.nav_start_time = rospy.Time.now()
                        #self.nav_start_odom = self.now_odom
                        
                        #rospy.loginfo('Manual Goal: (x={:.2f}, y={:.2f}, yaw={:.2f})'.format(goal.x, goal.y, goal.z))


            elif self.status == 3: # moving (rviz)
                '''
                stamp_max = 0
                for status in data.status_list:
                    stamp = float(status.goal_id.id.split('-')[2])
                    if stamp_max < stamp:
                        stamp_max = stamp
                        stamp_max_status = status.status
                if stamp_max_status == 3:
                    rospy.loginfo('Reached Goal')

                    self.status = 0
                    rospy.loginfo('Finish')
                '''

                if stamp_max_status.status == 3:
                    rospy.loginfo('Reached Goal')

                    self.status = 0
                    rospy.loginfo('Finish')


            elif self.status == 4:
                '''
                for status in data.status_list:
                    if status.goal_id.id == self.recent_goal_id and status.status == 3:
                        rospy.loginfo('Finish Recovery')

                        self.send_goal(self.goal_count)
                        self.status = self.status_backup
                '''
                if stamp_max_status.status == 3:
                    rospy.loginfo('Finish Recovery')

                    self.status = self.status_backup
                    
                    if self.status == 3:
                        self.goal_list = []
                        self.goal_count = 0
                        self.goal_list.append(self.rviz_goal)

                    self.send_goal(self.goal_count)

    
    def callback_move_base_goal(self, data):
        '''
        self.recent_goal_id = data.goal_id.id

        self.nav_start_time = data.header.stamp
        self.nav_start_odom = self.now_odom

        if data.goal_id.id == '':
            if self.status == 2:
                rospy.loginfo('Canceled Goal List')
                
            q = data.goal.target_pose.pose.orientation
            goal = Vector3(
                data.goal.target_pose.pose.position.x,
                data.goal.target_pose.pose.position.y,
                tf.transformations.euler_from_quaternion((q.x, q.y, q.z, q.w))[2])
            self.goal_list = []
            self.goal_list.append(goal)
            self.goal_count = 0
            self.status = 3
            
            rospy.loginfo('Manual Goal: (x={:.2f}, y={:.2f}, yaw={:.2f})'.format(goal.x, goal.y, goal.z))
        '''
        self.nav_start_time = data.header.stamp
        self.nav_start_odom = self.now_odom
        
        if data.goal_id.id == '':
            q = data.goal.target_pose.pose.orientation
            self.rviz_goal = Vector3(
                data.goal.target_pose.pose.position.x,
                data.goal.target_pose.pose.position.y,
                tf.transformations.euler_from_quaternion((q.x, q.y, q.z, q.w))[2])
            
            rospy.loginfo('Manual Goal: (x={:.2f}, y={:.2f}, yaw={:.2f})'.format(self.rviz_goal.x, self.rviz_goal.y, self.rviz_goal.z))
    
    def callback_odometry_filtered(self, data):
        self.now_odom = data
        
        #print(rospy.Time.now() - self.nav_start_time)
        #if rospy.Time.now() - self.nav_start_time > rospy.Duration(3.0):
        #    print('3.0s')

        if not self.recovery_flag and (self.status == 2 or self.status == 3):
        #if not self.recovery_flag and (self.status == 2 or self.status == 3 or self.status == 4):
            if rospy.Time.now() - self.nav_start_time > rospy.Duration(self.recovery_start_time):
                #rospy.loginfo('stopping?')
                pos_dif = [
                    abs(self.now_odom.pose.pose.position.x - self.nav_start_odom.pose.pose.position.x),
                    abs(self.now_odom.pose.pose.position.y - self.nav_start_odom.pose.pose.position.y),
                    0.0
                ]
                pos_dif_norm = tf.transformations.vector_norm(pos_dif)

                qua_start = self.nav_start_odom.pose.pose.orientation
                qua_start = [qua_start.x, qua_start.y, qua_start.z, qua_start.w]
                qua_now = self.now_odom.pose.pose.orientation
                qua_now = [qua_now.x, qua_now.y, qua_now.z, qua_now.w]
                qua_dif = tf.transformations.quaternion_multiply(qua_now, tf.transformations.quaternion_inverse(qua_start))
                eul_dif = tf.transformations.euler_from_quaternion(qua_dif)

                if pos_dif_norm < self.recovery_start_pos_thres and abs(eul_dif[2]) < self.recovery_start_rot_thres:
                    self.recovery_flag = True
                    rospy.loginfo('pos_dif_norm: {:.2f}, eul_dif.z: {:.2f}'.format(pos_dif_norm, eul_dif[2]))
                    rospy.logwarn('Recovery Action')


    def recovery_action(self):
        #self.action_client.cancel_all_goals()
        #if self.status != 4:
        #    self.status_backup = self.status

        self.status_backup = self.status
        self.status = 4

        goal = MoveBaseGoal()
        goal.target_pose.header.stamp = rospy.Time.now()
        goal.target_pose.header.frame_id = 'map'

        goal.target_pose.pose.position = self.now_odom.pose.pose.position

        qua_now = self.now_odom.pose.pose.orientation
        qua_now = [qua_now.x, qua_now.y, qua_now.z, qua_now.w]
        qua_rot = tf.transformations.quaternion_from_euler(0.0, 0.0, math.pi)
        qua_target = tf.transformations.quaternion_multiply(qua_now, qua_rot)
        goal.target_pose.pose.orientation = Quaternion(qua_target[0], qua_target[1], qua_target[2], qua_target[3])

        self.action_client.send_goal(goal)

        #rospy.loginfo('Send Goal [{}]: (x={:.2f}, y={:.2f}, yaw={:.2f})'.format(count, self.goal_list[count].x, self.goal_list[count].y, yaw))

        self.recovery_flag = False


    def publish_status(self):
        msg = nav_manager_status()
        msg.header.stamp = rospy.Time.now()
        
        if self.status == 0:
            msg.status = 'stop'
        elif self.status == 1:
            msg.status = 'pause'
        elif self.status == 2 or self.status == 3 or self.status == 4:
            msg.status = 'run'

        self.pub_status.publish(msg)


if __name__ == "__main__":
    rospy.init_node('navigation_manager', anonymous=True)
    rospy.loginfo("NavigationManager node Start")

    rate = rospy.Rate(10)

    try:
        nav_manager = NavigationManager()
        #rospy.spin()
        while not rospy.is_shutdown():
            nav_manager.publish_status()

            if nav_manager.recovery_flag:
                nav_manager.recovery_action()

            rate.sleep()

    except rospy.ROSInterruptException:
        pass
